@implements IDisposable
@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory
@* @inject _navigationManager _navigationManager *@

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">EshopNet</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Hem
            </NavLink>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item">
                    <button class="nav-link" @onclick="() => _productsNav = !_productsNav">
                        <span class="bi-caret-@(_productsNav ? "down" : "right")-fill me-3" aria-hidden="true"></span>
                        Products
                    </button>
                </div>
                @if (_productsNav)
                {
                    <div class="nav-item">
                        <NavLink class="nav-link" href="admin/products">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Products
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="admin/orders">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Orders
                        </NavLink>
                    </div>
                    @if (_currentUser.IsInRole(Constants.Role_Admins))
                    {
                        <div class="nav-item">
                            <NavLink class="nav-link" href="admin/categories">
                                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Categories
                            </NavLink>
                        </div>
                    }
                }
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="@Constants.Role_Admins">
            <Authorized>

                <div class="nav-item">
                    <NavLink class="nav-link" href="admin/companies">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Companies
                    </NavLink>
                </div>

                <div class="nav-item">
                    <button class="nav-link" @onclick="() => _authNav = !_authNav">
                        <span class="bi-caret-@(_authNav ? "down" : "right")-fill me-3" aria-hidden="true"></span>
                        Auth
                    </button>
                </div>
                @if (_authNav)
                {
                    <div class="nav-item">
                        <NavLink class="nav-link" href="admin/users">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Users
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="admin/roles">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Roles
                        </NavLink>
                    </div>
                }
                <div class="nav-item">
                    <button class="nav-link" @onclick="() => _demosNav = !_demosNav">
                        <span class="bi-caret-@(_demosNav ? "down" : "right")-fill me-3" aria-hidden="true"></span>
                        Demos
                    </button>
                </div>
                @if (_demosNav)
                {
                    <div class="nav-item">
                        <NavLink class="nav-link" href="demo/email">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Email
                        </NavLink>
                    </div>

                    <div class="nav-item">
                        <NavLink class="nav-link" href="demo/interactiveservermode">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Server
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="demo/interactivewebassemblymode">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> WASM
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="demo/interactiveautomode">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Auto
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="people">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> People
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="wasm/people">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> People (WASM)
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="counter">
                            <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="weather">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
                        </NavLink>
                    </div>
                }

                <div class="nav-item">
                    <NavLink class="nav-link" href="auth">
                        <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> Auth Required
                    </NavLink>
                </div>
                <div class="nav-item">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>

            </Authorized>
        </AuthorizeView>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item">
                    <form action="/Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@_currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>

            <NotAuthorized>
                <div class="nav-item">
                    <NavLink class="nav-link" href="Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item">
                    <NavLink class="nav-link" href="Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? _currentUrl;
    private ClaimsPrincipal _currentUser = default!;

    private bool _demosNav;
    private bool _authNav;
    private bool _productsNav;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = (await _authenticationStateProvider!.GetAuthenticationStateAsync()).User;

        _currentUrl = _navigationManager.ToBaseRelativePath(_navigationManager.Uri);
        _navigationManager.LocationChanged += OnLocationChanged;
    }

    private async Task HandleLogout()
    {
        var url = new Uri(new Uri(_navigationManager.BaseUri), "/account/LogOut").ToString();
        var data = new Dictionary<string, string>();
        await PostPageAsync(url, data);

        // var client = HttpClientFactory.CreateClient();
        // client.BaseAddress = new Uri("https://localhost:7228/");
        // var response = await client.PostAsync("Account/Logout", null);
        // if (response.IsSuccessStatusCode)
        // {
        //     _navigationManager.NavigateTo("/", true);
        // }
        // else
        // {
        //     // Handle error response
        //     Console.WriteLine("Logout failed: " + response.StatusCode);
        // }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = _navigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        _navigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task<string> PostPageAsync(string url, IDictionary<string, string> data)
    {
        var content = new FormUrlEncodedContent(data);

        using (var client = new HttpClient())
        {
            var response = await client.PostAsync(url, content);

            if (response.IsSuccessStatusCode)
            {
                var responseBody = await response.Content.ReadAsStringAsync();
                return responseBody;
            }

            return response.StatusCode.ToString();
        }
    }
}

