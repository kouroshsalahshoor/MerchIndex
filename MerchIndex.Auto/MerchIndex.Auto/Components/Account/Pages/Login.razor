@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using MerchIndex.Auto.Components.Account
@using MerchIndex.Auto.Components.Account.Shared
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MerchIndex.Auto.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@* @inject NavigationManager NavigationManager *@
@inject IdentityRedirectManager RedirectManager

@* @inject AuthenticationStateProvider _authenticationStateProvider *@

<PageTitle>@_title</PageTitle>

@* <h1>@_title</h1> *@

<div class="row">
    <div class="col-md-4 offset-md-4 p-4 p-md-5 border rounded-3">
        <section>

            <div class="text-center">
                <img class="mb-4" src="images/logo.png" alt="">
                <h3 class="text-center">@_title</h3>
                <hr />
            </div>

            <StatusMessage Message="@_errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.UserName" id="Input.UserName" class="form-control" autocomplete="UserName" aria-required="true" placeholder="UserName" />
                    <label for="Input.UserName" class="form-label">UserName</label>
                    <ValidationMessage For="() => Input.UserName" class="text-danger" />
                </div>
                @* <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="Input.Email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div> *@
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="Input.Password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Kom ihåg mig
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">@_title</button>
                </div>
                <hr class="my-4">
                <div class="text-center">
                    <small class="text-body-secondary"><a class="text-decoration-none" href="CompanyRegister"><i class="bi bi-person-plus"></i> Registrera Företag</a></small>
                </div>
                @*                 <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                                        <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div> *@
            </EditForm>
        </section>
    </div>

</div>

@* <div class="row">
    <div>
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div> *@
@code {
    private ApplicationDbContext _db => Service;

    private string _title = "Logga in";
    private string? _errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        _errorMessage = string.Empty;

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        // var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");

            var user = await _userManager.Users.SingleOrDefaultAsync(x => x.UserName == Input.UserName);
            if (await _userManager.IsInRoleAsync(user!, Constants.Role_Admins))
            {
                if (string.IsNullOrEmpty(ReturnUrl))
                {
                    _navigationManager.NavigateTo("/admin");
                }
            }
            else if (await _userManager.IsInRoleAsync(user!, Constants.Role_CompanyAdmins))
            {
                var company = await _db.Companies.FirstOrDefaultAsync(x => x.Email == Input.UserName);
                if (company is null)
                {
                    await SignInManager.SignOutAsync();
                    _errorMessage = "Inget företag hittades!";
                }
                else
                {
                    if (company.IsActive == false)
                    {
                        await SignInManager.SignOutAsync();
                        _navigationManager.NavigateTo("/companynotconfirmed");
                    }
                }

                if (string.IsNullOrEmpty(ReturnUrl))
                {
                    _navigationManager.NavigateTo("/admin");
                }
            }

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            _errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";
        // [Required]
        // [EmailAddress]
        // public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
