@rendermode InteractiveServer

@if (_model is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="_model" OnValidSubmit="submit" FormName="create" Enhance>
        <h5>Prenumerera</h5>
        <p>Få de allra senaste och mest spännande produkter från oss.</p>


        <div class="d-flex flex-column flex-sm-row w-100 gap-2">

            <DataAnnotationsValidator />
            @* <ValidationSummary class="text-danger" role="alert" /> *@

            <label for="newsletter1" class="visually-hidden">Email</label>
            <InputText type="email" @bind-Value="_model.Email" class="form-control" placeholder="Email" />
            <button class="btn btn-warning" type="submit"><span style="white-space: nowrap;"><i class="bi bi-send"></i> Skicka</span></button>

        </div>
        <div>
            <_errors Items="@_errors" />
            <ValidationMessage For="() => _model.Email" class="text-danger" />
        </div>
    </EditForm>
}

@code {
    private ApplicationDbContext _db => Service;

    [SupplyParameterFromForm]
    private Subscription? _model { get; set; } = new();

    private List<string> _errors = new();

    private async Task submit()
    {
        _errors.Clear();

        if (await _db.Subscriptions.AnyAsync(x => x.Email == _model!.Email))
        {
            _errors.Add(Constants.SameEmailText);
            return;
        }

        _db.Subscriptions.Add(_model!);

        try
        {
            await _db.SaveChangesAsync();

            _model = new();
            await _js.ToastrSuccess(Constants.SaveSuccess);
            StateHasChanged();
        }
        catch (DbUpdateConcurrencyException e)
        {
            _errors.Add(Constants.SaveErrorText);
            _errors.Add(e.Message);
        }

    }
}
