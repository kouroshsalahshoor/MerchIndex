@rendermode InteractiveServer
@attribute [StreamRendering]

<div class="p-4">
    @* <h4 class="fst-italic"><strong> <i class="bi bi-search"></i> Sök </strong></h4>
    <hr /> *@
    @* <div class="my-3"> *@
    <div>

        <div class="mb-3">
            <div class="input-group">
                <div class="form-floating">
                    <input class="form-control" id="InputSearch" placeholder="" @bind-value="@_searchTerm">
                    @* <input class="form-control" id="InputSearch" placeholder="" @bind-value="@_searchTerm" @oninput="setSearchTerm"> *@
                    <label for="InputSearch" class="form-label">Sök Text ....</label>
                </div>
                <button class="btn btn-warning text-light" @onclick="search" title="Sök" style="font-size: 28px;"
                        data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar">
                    <i class="bi bi-search"></i>
                </button>
                <button class="btn btn-light text-danger" @onclick="@reset" title="Reset" style="font-size: 28px;"><i class="bi bi-x"></i></button>
            </div>
        </div>

        <div class="mb-1">
            <div class="form-floating">
                <InputSelect ValueExpression="@(()=>_selectedCity)"
                             Value="@_selectedCity"
                             ValueChanged="@((string value) => citySelected(value))"
                             class="form-select" id="SelectCity">
                    <option value="">Alla</option>

                    @foreach (var item in _cities ?? new())
                    {
                        if (string.IsNullOrEmpty(item) == false)
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </InputSelect>
                <label for="SelectCity">Välj en Stad</label>
            </div>
        </div>
        <div class="mb-1">
            <div class="form-floating">
                <InputSelect ValueExpression="@(()=>_selectedDistrict)"
                             Value="@_selectedDistrict"
                             ValueChanged="@(async (string value) => await districtSelected(value))"
                             class="form-select" id="SelectDistrict"
                             disabled="@_districtDisabled">
                    <option value="">Alla</option>

                    @foreach (var item in _districts ?? new())
                    {
                        if (string.IsNullOrEmpty(item) == false)
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </InputSelect>
                <label for="SelectCity">Välj en Ort</label>
            </div>
        </div>
        <div class="mb-1">
            <div class="form-floating">
                <InputSelect ValueExpression="@(()=>_selectedCompany)"
                             Value="@_selectedCompany"
                             ValueChanged="@((string value) => companySelected(value))"
                             class="form-select" id="SelectCompany"
                             disabled="@_companyDisabled">
                    <option value="">Alla</option>

                    @foreach (var item in _companies ?? new())
                    {
                        if (string.IsNullOrEmpty(item) == false)
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </InputSelect>
                <label for="SelectCity">Välj ett Företag</label>
            </div>
        </div>
        <div class="mb-1">
            <div class="form-floating">
                <InputSelect ValueExpression="@(()=>_selectedCategory)"
                             Value="@_selectedCategory"
                             ValueChanged="@((string value) => categorySelected(value))"
                             class="form-select" id="SelectCategory"
                             disabled="@_categoryDisabled">
                    <option value="">Alla</option>

                    @foreach (var item in _categories ?? new())
                    {
                        if (string.IsNullOrEmpty(item) == false)
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </InputSelect>
                <label for="SelectCategory">Välj en Kategorier</label>
            </div>
        </div>
        <div class="mb-1">
            <div class="form-floating">
                <InputSelect ValueExpression="@(()=>_selectedManifacturer)"
                             Value="@_selectedManifacturer"
                             ValueChanged="@((string value) => manifacturerSelected(value))"
                             class="form-select" id="SelectManifacturer"
                             disabled="@_manifacturerDisabled">
                    <option value="">Alla</option>

                    @foreach (var item in _manifacturers ?? new())
                    {
                        if (string.IsNullOrEmpty(item) == false)
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </InputSelect>
                <label for="SelectManifacturer">Välj en Tillverkare</label>
            </div>
        </div>
        <div class="mb-1">
            <div class="form-floating">
                <InputSelect ValueExpression="@(()=>_selectedSortBy)"
                             Value="@_selectedSortBy"
                             ValueChanged="@((string value) => sortBySelected(value))"
                             class="form-select" id="SelectSort">
                    @* <option value="" selected>Id</option> *@
                    <option value="name" selected>Namn</option>
                    <option value="price">Pris</option>
                    <option value="category">Kategori</option>
                    <option value="manifacturer">Tillverkare</option>
                </InputSelect>
                <label for="SelectSort">Sortera Efter</label>
            </div>
        </div>
        <div class="mb-1">
            <div class="form-floating">
                <InputSelect ValueExpression="@(()=>_selectedOrder)"
                             Value="@_selectedOrder"
                             ValueChanged="@((string value) => orderBySelected(value))"
                             class="form-select" id="SelectOrder">
                    <option value="" selected>Uppstigande</option>
                    <option value="desc">Nedåtgående</option>
                </InputSelect>
                <label for="SelectOrder">Ordning</label>
            </div>
        </div>

    </div>

</div>

@code {
    [Parameter] public string? SearchTerm { get; set; }

    private ApplicationDbContext _db => Service;

    private List<Company> _allCompanies = default!;

    private string? _searchTerm;

    private List<string> _cities = new();
    private string? _selectedCity;

    private List<string> _districts = new();
    private string? _selectedDistrict;
    private bool _districtDisabled = true;

    private List<string> _companies = new();
    private string? _selectedCompany;
    private bool _companyDisabled = true;

    private List<string> _categories = new();
    private string? _selectedCategory;
    private bool _categoryDisabled = true;

    private List<string> _manifacturers = new();
    private string? _selectedManifacturer;
    private bool _manifacturerDisabled = true;

    private string? _selectedSortBy;
    private string? _selectedOrder;

    protected override async Task OnInitializedAsync()
    {
        reset();

        _allCompanies = await _db.Companies.AsNoTracking().ToListAsync();

        //fill cities
        _cities = _allCompanies.Select(x => x.City).Distinct().OrderBy(x => x).ToList();
    }

    private void citySelected(string val)
    {
        _selectedCity = val;
        _districts = _allCompanies.Where(x => x.City == _selectedCity).Select(x => x.District).Distinct().ToList();
        _districtDisabled = false;
    }
    private async Task districtSelected(string val)
    {
        _selectedDistrict = val;

        //fill dropdowns
        _companies = _allCompanies.Where(x => x.District == _selectedDistrict).Select(x => x.Name!).Distinct().ToList();
        _manifacturers = await _db.Products.Select(x => x.Manifacturer!).Distinct().ToListAsync();
        _categories = await _db.Products.Select(x => x.Category).Distinct().ToListAsync();

        _companyDisabled = false;
        _categoryDisabled = false;
        _manifacturerDisabled = false;
    }
    private void companySelected(string val)
    {
        _selectedCompany = val;
    }

    private void categorySelected(string val)
    {
        _selectedCategory = val;
    }

    private void manifacturerSelected(string val)
    {
        _selectedManifacturer = val;
    }

    private void sortBySelected(string val)
    {
        _selectedSortBy = val;
    }

    private void orderBySelected(string val)
    {
        _selectedOrder = val;
    }

    private void setSearchTerm(ChangeEventArgs e)
    {
        _searchTerm = (string)e.Value!;
    }

    private void reset()
    {
        _districts.Clear();
        _companies.Clear();
        _categories.Clear();
        _manifacturers.Clear();

        _searchTerm = default;
        _selectedCity = default;
        _selectedDistrict = default;
        _selectedCompany = default;
        _selectedCategory = default;
        _selectedManifacturer = default;
        _selectedSortBy = default;
        _selectedOrder = default;

        _districtDisabled = true;
        _companyDisabled = true;
        _categoryDisabled = true;
        _manifacturerDisabled = true;
    }

    private void search()
    {
        string url = "/products";
        if (
            string.IsNullOrEmpty(_searchTerm) == false ||
            string.IsNullOrEmpty(_selectedCity) == false ||
            string.IsNullOrEmpty(_selectedDistrict) == false ||
            string.IsNullOrEmpty(_selectedCompany) == false ||
            string.IsNullOrEmpty(_selectedCategory) == false ||
            string.IsNullOrEmpty(_selectedManifacturer) == false ||
            string.IsNullOrEmpty(_selectedSortBy) == false ||
            string.IsNullOrEmpty(_selectedOrder) == false
        )
        {
            url += "?";
        }

        if (string.IsNullOrEmpty(_searchTerm) == false)
        {
            url += $"searchterm={_searchTerm}";
        }
        if (string.IsNullOrEmpty(_selectedCity) == false)
        {
            url += $"city={_selectedCity}";
        }
        if (string.IsNullOrEmpty(_selectedDistrict) == false)
        {
            url += $"district={_selectedDistrict}";
        }
        if (string.IsNullOrEmpty(_selectedCompany) == false)
        {
            url += $"company={_selectedCompany}";
        }
        if (string.IsNullOrEmpty(_selectedCategory) == false)
        {
            url += $"category={_selectedCategory}";
        }
        if (string.IsNullOrEmpty(_selectedManifacturer) == false)
        {
            url += $"manifacturer={_selectedManifacturer}";
        }
        if (string.IsNullOrEmpty(_selectedSortBy) == false)
        {
            url += $"sortby={_selectedSortBy}";
        }
        if (string.IsNullOrEmpty(_selectedOrder) == false)
        {
            url += $"order={_selectedOrder}";
        }

        _navigationManager.NavigateTo(url);
    }
}
