@rendermode InteractiveServer
@attribute [StreamRendering]

@* search *@
@if (_loading)
{
    <div class="d-flex align-items-center justify-content-center">
        <_Loading />
    </div>
}

<div class="row g-2">
    
    <div class="col-md-8">
        @* <h3 class="pb-4 mb-4 fst-italic border-bottom">
            xxx
        </h3> *@

        @* products *@
        @* <div class="row row-cols-2 row-cols-sm-2 row-cols-md-3 g-3" style="overflow-y: scroll; height:70vh;"> *@
        <div class="row row-cols-2 row-cols-sm-2 row-cols-md-3 g-3">

            @foreach (var item in _items)
            {
                <div class="col my-3">
                    <div class="card shadow-sm">
                        <img class="bd-placeholder-img card-img-top" src="@item.ImageUrl" />
                        <div class="card-body text-center">
                            <p class="card-text fw-bold">@item.Name</p>
                            <p class="card-text fst-italic"><strong>@item.Price</strong> kr</p>
                            @* <p class="card-text fst-italic"><strong>@item.Price.ToString("c")</strong></p> *@

                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-body-secondary">@item.Company.Name</small>
                                <small class="text-body-secondary">@item.Category</small>
                            </div>

                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-body-secondary">@item.Company.City</small>
                                <small class="text-body-secondary">@item.Company.District</small>
                            </div>

                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-body-secondary">@item.Manifacturer</small>
                                <small class="text-body-secondary"></small>
                            </div>

                            @* <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-primary">View</button>
                            </div> *@
                        </div>
                    </div>
                </div>
            }
        </div>

        <_Paging TotalItems="@_totalItems" CurrentPage="@_page" OnPageChanged="pageChanged" />
        @* <nav class="blog-pagination" aria-label="Pagination">
            <a class="btn btn-outline-primary rounded-pill" href="#">Older</a>
            <a class="btn btn-outline-secondary rounded-pill disabled" aria-disabled="true">Newer</a>
        </nav> *@

    </div>

    <div class="col-md-4">
        <div class="position-sticky" style="top: 2rem;">

            <div class="p-4">
                <h4 class="fst-italic"><strong> <i class="bi bi-search"></i> Sök </strong></h4>
                <hr />

                <_Search />

            </div>

        </div>
    </div>

</div>

@code {
    [Parameter] public string? SearchTerm { get; set; }

    private ApplicationDbContext _db => Service;

    // private IQueryable<Product> query = default!;
    private List<Product> _items { get; set; } = new();

    private bool _loading;

    //paging
    private int _page = 1;
    private int _pageSize = 12;
    private int _totalItems = 0;

    //search
    private List<string> _cities = new();
    private string? _selectedCity;
    private List<string> _districts = new();
    private string? _selectedDistrict;
    private List<string> _companies = new();
    private string? _selectedCompany;

    private List<string> _categories = new();
    private string? _selectedCategory;
    private List<string> _manifacturers = new();
    private string? _selectedManifacturer;

    private string? _selectedSortBy;
    private string? _selectedOrder;

    private string? _searchTerm;

    protected override async Task OnInitializedAsync()
    {
        await init();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(SearchTerm) == false)
        {
            _searchTerm = SearchTerm.Trim().ToLower();

            await load();
        }
    }

    private async Task load()
    {
        // _loading = true;
        // StateHasChanged();

        var query = _db.Products
        .Include(x => x.Company)
        .AsNoTracking()
        .AsQueryable();

        query = query
        .Where(x =>
        (
            string.IsNullOrEmpty(_searchTerm) ||
            x.Name.ToLower().Contains(_searchTerm) ||
            x.Price.ToString().Contains(_searchTerm) ||
            x.Category.ToLower().Contains(_searchTerm)
        ) &&
            (string.IsNullOrEmpty(_selectedCity) || x.Company.City == _selectedCity) &&
            (string.IsNullOrEmpty(_selectedDistrict) || x.Company.District == _selectedDistrict) &&
            (string.IsNullOrEmpty(_selectedCompany) || x.Company.Name == _selectedCompany) &&
            (string.IsNullOrEmpty(_selectedCategory) || x.Category == _selectedCategory) &&
            (string.IsNullOrEmpty(_selectedManifacturer) || x.Manifacturer == _selectedManifacturer)
        ).AsQueryable();

        if (_selectedSortBy == "name")
        {
            if (_selectedOrder == "desc")
            {
                query = query.OrderByDescending(x => x.Name).AsQueryable();
            }
            else
            {
                query = query.OrderBy(x => x.Name).AsQueryable();
            }
        }
        else if (_selectedSortBy == "price")
        {
            if (_selectedOrder == "desc")
            {
                query = query.OrderByDescending(x => x.Price).AsQueryable();
            }
            else
            {
                query = query.OrderBy(x => x.Price).AsQueryable();
            }
        }
        else if (_selectedSortBy == "category")
        {
            if (_selectedOrder == "desc")
            {
                query = query.OrderByDescending(x => x.Category).AsQueryable();
            }
            else
            {
                query = query.OrderBy(x => x.Category).AsQueryable();
            }
        }
        else if (_selectedSortBy == "manifacturer")
        {
            if (_selectedOrder == "desc")
            {
                query = query.OrderByDescending(x => x.Manifacturer).AsQueryable();
            }
            else
            {
                query = query.OrderBy(x => x.Manifacturer).AsQueryable();
            }
        }
        else
        {
            if (_selectedOrder == "desc")
            {
                query = query.OrderByDescending(x => x.Id).AsQueryable();
            }
            else
            {
                query = query.OrderBy(x => x.Id).AsQueryable();
            }
        }

        _totalItems = await query.CountAsync();

        //fill dropdowns
        _districts = await query.Select(x => x.Company.District).Distinct().ToListAsync();
        _companies = await query.Select(x => x.Company.Name!).Distinct().ToListAsync();
        _manifacturers = await query.Select(x => x.Manifacturer!).Distinct().ToListAsync();
        _categories = await query.Select(x => x.Category).Distinct().ToListAsync();

        query = query.Skip((_page - 1) * _pageSize)
        .Take(_pageSize);

        _items = await query.ToListAsync();

        // _loading = false;
        // StateHasChanged();
    }

    private async Task citySelected(string val)
    {
        _page = 1;
        _selectedCity = val;
        await load();
    }
    private async Task districtSelected(string val)
    {
        _page = 1;
        _selectedDistrict = val;
        await load();
    }
    private async Task companySelected(string val)
    {
        _page = 1;
        _selectedCompany = val;
        await load();
    }

    private async Task categorySelected(string val)
    {
        _page = 1;
        _selectedCategory = val;
        await load();
    }

    private async Task manifacturerSelected(string val)
    {
        _page = 1;
        _selectedManifacturer = val;
        await load();
    }

    private async Task sortBySelected(string val)
    {
        _page = 1;
        _selectedSortBy = val;
        await load();
    }

    private async Task orderBySelected(string val)
    {
        _page = 1;
        _selectedOrder = val;
        await load();
    }

    private async Task search(ChangeEventArgs e)
    {
        _page = 1;
        _searchTerm = (string)e.Value!;
        await load();
    }

    private async Task init()
    {
        _page = 1;

        var query = _db.Products
        .Include(x => x.Company)
        .AsNoTracking()
        .AsQueryable();

        _cities = await query.Select(x => x.Company.City).Distinct().ToListAsync();
        _companies = await query.Select(x => x.Company.Name).Distinct().ToListAsync();
        _categories = await query.Select(x => x.Category).Distinct().ToListAsync();
        _manifacturers = await query.Select(x => x.Manifacturer!).Distinct().ToListAsync();

        _districts.Clear();

        _searchTerm = default;
        _selectedCity = default;
        _selectedDistrict = default;
        _selectedCompany = default;
        _selectedCategory = default;
        _selectedManifacturer = default;
        _selectedSortBy = default;
        _selectedOrder = default;

        await load();
    }

    private async Task pageChanged(int page)
    {
        _page = page;

        await load();

        await _js.InvokeVoidAsync("ScrollToTop");
    }
}
