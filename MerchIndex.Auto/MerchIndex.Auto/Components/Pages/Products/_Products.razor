@rendermode InteractiveServer
@attribute [StreamRendering]

@* search *@

<div class="collapse" id="navbarHeader">
    <div class="container">
        <div class="row">
            <div class="col-12 py-4">

@* <div class="row align-items-center g-2 mb-3"> *@
                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3 my-5">
                    <div class="col-md">
                        <div class="form-floating">
                            <select class="form-select" id="SelectCity" @onchange="citySelected">
                                <option value="" selected disabled>Städer</option>
                                <option value="">Alla</option>

                                @foreach (var item in _cities ?? new())
                                {
                                    if (string.IsNullOrEmpty(item) == false)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </select>
                            <label for="SelectCity">Välj en Stad</label>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="form-floating">
                            <select class="form-select" id="SelectDistrict" @onchange="districtSelected">
                                <option value="" selected disabled>Orter</option>
                                <option value="">Alla</option>

                                @foreach (var item in _districts ?? new())
                                {
                                    if (string.IsNullOrEmpty(item) == false)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </select>
                            <label for="SelectCity">Välj en Ort</label>
                        </div>
                    </div>

                    <div class="col-md">
                        <div class="form-floating">
                            <select class="form-select" id="SelectCategory" @onchange="categorySelected">
                                <option value="" selected disabled>Kategorier</option>
                                <option value="">Alla</option>

                                @foreach (var item in _categories ?? new())
                                {
                                    if (string.IsNullOrEmpty(item) == false)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </select>
                            <label for="SelectCategory">Välj en Kategorier</label>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="form-floating">
                            <select class="form-select" id="SelectManifacturer" @onchange="manifacturerSelected">

                                <option value="" selected disabled>Tillverkare</option>
                                <option value="">Alla</option>

                                @foreach (var item in _manifacturers ?? new())
                                {
                                    if (string.IsNullOrEmpty(item) == false)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </select>
                            <label for="SelectManifacturer">Välj en Tillverkare</label>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="form-floating">
                            <select class="form-select" id="SelectSort" @onchange="sortBySelected">
                                <option value="" selected>Id</option>
                                <option value="name">Namn</option>
                                <option value="price">Pris</option>
                                <option value="category">Kategori</option>
                                <option value="manifacturer">Tillverkare</option>
                            </select>
                            <label for="SelectSort">Sortera</label>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="input-group">
                            <div class="form-floating">
                                <input class="form-control" id="InputSearch" placeholder="" @bind-value="@_searchTerm" @oninput="search">
                                <label for="InputSearch" class="form-label">Produkt / Service sökning....</label>
                            </div>
                            <button class="btn btn-warning text-light" @onclick="@(async() => await load())" title="Sök" style="font-size: 28px;"><i class="bi bi-search"></i></button>
                            <button class="btn btn-light text-danger" @onclick="@(async() => await reset())" title="Reset" style="font-size: 28px;"><i class="bi bi-x"></i></button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
<div class="navbar shadow-sm border-bottom my-5" data-bs-toggle="collapse" data-bs-target="#navbarHeader" aria-controls="navbarHeader" aria-expanded="false" aria-label="Toggle navigation">
    <div class="container">
        <a href="javascript:void(0);" class="navbar-brand d-flex align-items-center">
            <strong> <i class="bi bi-search"></i> Sök </strong>
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarHeader" aria-controls="navbarHeader" aria-expanded="false" aria-label="Toggle navigation">
            <i class="bi bi-gear"></i>
        </button>
    </div>
</div>

@* products *@
<div class="row row-cols-2 row-cols-sm-2 row-cols-md-4 g-6">

    @foreach (var item in _items)
    {
        <div class="col">
            <div class="card shadow-sm">
                <img class="bd-placeholder-img card-img-top" src="@item.ImageUrl" />
                <div class="card-body text-center">
                    <p class="card-text fw-bold">@item.Name</p>
                    <p class="card-text">@item.Price.ToString("c")</p>
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="btn-group">
                            <button type="button" class="btn btn-sm btn-outline-primary">View</button>
                        </div>
                        <small class="text-body-secondary">@item.Category</small>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? SearchTerm { get; set; }

    private ApplicationDbContext _db => Service;

    private IQueryable<Product> _query = default!;
    private List<Product> _items = new();

    //paging
    private int _page = 1;
    private int _pageSize = 100;

    //search
    private List<string> _cities = new();
    private string? _selectedCity;
    private List<string> _districts = new();
    private string? _selectedDistrict;

    private List<string> _categories = new();
    private string? _selectedCategory;
    private List<string>? _manifacturers = new();
    private string? _selectedManifacturer;

    private string? _selectedSortBy;
    private string? _searchTerm;

    protected override async Task OnInitializedAsync()
    {

        _query = _db.Products
        .Include(x => x.Company)
        .AsNoTracking()
        .AsQueryable();

        _cities = await _query.Select(x => x.Company.City).Distinct().ToListAsync();
        // _districts = await _query.Select(x => x.Company.District).Distinct().ToListAsync();

        _categories = await _query.Select(x => x.Category).Distinct().ToListAsync();
        _manifacturers = await _query.Select(x => x.Manifacturer!).Distinct().ToListAsync();

        await load();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(SearchTerm) == false)
        {
            _searchTerm = SearchTerm.Trim().ToLower();

            await load();
        }
    }

    private async Task load()
    {
        _query = _query
        .Where(x =>
        (
        string.IsNullOrEmpty(_searchTerm) ||
        x.Name.ToLower().Contains(_searchTerm) ||
        x.Price.ToString().Contains(_searchTerm) ||
        x.Category.ToLower().Contains(_searchTerm)
        ) &&
        (string.IsNullOrEmpty(_selectedCategory) || x.Category == _selectedCategory) &&
        (string.IsNullOrEmpty(_selectedManifacturer) || x.Manifacturer == _selectedManifacturer)
        )
        .Skip((_page - 1) * _pageSize)
        .Take(_pageSize);

        if (_selectedSortBy == "name")
        {
            _query = _query.OrderBy(x => x.Name);
        }
        else if (_selectedSortBy == "price")
        {
            _query = _query.OrderBy(x => x.Price);
        }
        else if (_selectedSortBy == "category")
        {
            _query = _query.OrderBy(x => x.Category);
        }
        else
        {
            _query = _query.OrderBy(x => x.Id);
        }

        _items = await _query.ToListAsync();
    }

    private async Task citySelected(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            _selectedCity = (string)e.Value;

            _districts = await _query.Where(x => x.Company.City == _selectedCity).Select(x => x.Company.District).Distinct().ToListAsync();

            await load();
        }
    }
    private async Task districtSelected(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            _selectedCity = (string)e.Value;

            await load();
        }
    }

    private async Task categorySelected(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            _selectedCategory = (string)e.Value;

            await load();
        }
    }

    private async Task manifacturerSelected(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            _selectedManifacturer = (string)e.Value;

            await load();
        }
    }

    private async Task sortBySelected(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            _selectedSortBy = (string)e.Value;

            await load();
        }
    }

    private async Task search(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            _searchTerm = (string)e.Value;
            await load();
        }
    }

    private async Task reset()
    {
        _searchTerm = null;
        _selectedCategory = null;
        _selectedManifacturer = null;
        _page = 1;
        _selectedSortBy = null;

        await load();
    }
    }
