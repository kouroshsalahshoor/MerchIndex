@rendermode InteractiveServer
@attribute [StreamRendering]

@* search *@
@if (_loading)
{
    <div class="d-flex align-items-center justify-content-center">
        <_Loading />
    </div>
}

<div class="collapse" id="navbarHeader">
    <div class="container">
        <div class="row">
            <div class="col-12 py-2">

                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3 my-5">

                    <div class="col-md">
                        <div class="form-floating">
                            <InputSelect ValueExpression="@(()=>_selectedCity)"
                                         Value="@_selectedCity"
                                         ValueChanged="@(async (string value) => await citySelected(value))"
                                         class="form-select" id="SelectCity">
                                <option value="">Alla</option>

                                @foreach (var item in _cities ?? new())
                                {
                                    if (string.IsNullOrEmpty(item) == false)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </InputSelect>
                            <label for="SelectCity">Välj en Stad</label>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="form-floating">
                            <InputSelect ValueExpression="@(()=>_selectedDistrict)"
                                         Value="@_selectedDistrict"
                                         ValueChanged="@(async (string value) => await districtSelected(value))"
                                         class="form-select" id="SelectDistrict">
                                <option value="">Alla</option>

                                @foreach (var item in _districts ?? new())
                                {
                                    if (string.IsNullOrEmpty(item) == false)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </InputSelect>
                            <label for="SelectCity">Välj en Ort</label>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="form-floating">
                            <InputSelect ValueExpression="@(()=>_selectedCompany)"
                                         Value="@_selectedCompany"
                                         ValueChanged="@(async (string value) => await companySelected(value))"
                                         class="form-select" id="SelectCompany">
                                <option value="">Alla</option>

                                @foreach (var item in _companies ?? new())
                                {
                                    if (string.IsNullOrEmpty(item) == false)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </InputSelect>
                            <label for="SelectCity">Välj ett Företag</label>
                        </div>
                    </div>

                    <div class="col-md">
                        <div class="form-floating">
                            <InputSelect ValueExpression="@(()=>_selectedCategory)"
                                         Value="@_selectedCategory"
                                         ValueChanged="@(async (string value) => await categorySelected(value))"
                                         class="form-select" id="SelectCategory">
                                <option value="">Alla</option>

                                @foreach (var item in _categories ?? new())
                                {
                                    if (string.IsNullOrEmpty(item) == false)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </InputSelect>
                            <label for="SelectCategory">Välj en Kategorier</label>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="form-floating">
                            <InputSelect ValueExpression="@(()=>_selectedManifacturer)"
                                         Value="@_selectedManifacturer"
                                         ValueChanged="@(async (string value) => await manifacturerSelected(value))"
                                         class="form-select" id="SelectManifacturer">
                                <option value="">Alla</option>

                                @foreach (var item in _manifacturers ?? new())
                                {
                                    if (string.IsNullOrEmpty(item) == false)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </InputSelect>
                            <label for="SelectManifacturer">Välj en Tillverkare</label>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="form-floating">
                            <InputSelect ValueExpression="@(()=>_selectedSortBy)"
                                         Value="@_selectedSortBy"
                                         ValueChanged="@(async (string value) => await sortBySelected(value))"
                                         class="form-select" id="SelectSort">
                                <option value="" selected>Id</option>
                                <option value="name">Namn</option>
                                <option value="price">Pris</option>
                                <option value="category">Kategori</option>
                                <option value="manifacturer">Tillverkare</option>
                            </InputSelect>
                            <label for="SelectSort">Sortera Efter</label>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="form-floating">
                            <InputSelect ValueExpression="@(()=>_selectedOrder)"
                                         Value="@_selectedOrder"
                                         ValueChanged="@(async (string value) => await orderBySelected(value))"
                                         class="form-select" id="SelectOrder">
                                <option value="" selected>Uppstigande</option>
                                <option value="desc">Nedåtgående</option>
                            </InputSelect>
                            <label for="SelectOrder">Ordning</label>
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="input-group">
                            <div class="form-floating">
                                <input class="form-control" id="InputSearch" placeholder="" @bind-value="@_searchTerm" @oninput="search">
                                <label for="InputSearch" class="form-label">Produkt / Service sökning....</label>
                            </div>
                            <button class="btn btn-warning text-light" @onclick="@(async() => await load())" title="Sök" style="font-size: 28px;"><i class="bi bi-search"></i></button>
                            <button class="btn btn-light text-danger" @onclick="@(async() => await reset())" title="Reset" style="font-size: 28px;"><i class="bi bi-x"></i></button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
<div class="navbar shadow-sm border-bottom my-3" data-bs-toggle="collapse" data-bs-target="#navbarHeader" aria-controls="navbarHeader" aria-expanded="false" aria-label="Toggle navigation">
    <div class="container">
        <a href="javascript:void(0);" class="navbar-brand d-flex align-items-center">
            <strong> <i class="bi bi-search"></i> Sök </strong>
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarHeader" aria-controls="navbarHeader" aria-expanded="false" aria-label="Toggle navigation">
            <i class="bi bi-gear"></i>
        </button>
    </div>
</div>

@* products *@
<div class="row row-cols-2 row-cols-sm-2 row-cols-md-4 g-6">

    @foreach (var item in _items)
    {
        <div class="col my-3">
            <div class="card shadow-sm">
                <img class="bd-placeholder-img card-img-top" src="@item.ImageUrl" />
                <div class="card-body text-center">
                    <p class="card-text fw-bold">@item.Name</p>
                    <p class="card-text"><strong>@item.Price.ToString("c")</strong></p>
                    <div class="d-flex justify-content-between align-items-center">
                        @* <div class="btn-group">
                            <button type="button" class="btn btn-sm btn-outline-primary">View</button>
                        </div> *@
                        <small class="text-body-secondary">@item.Company.Name</small>
                        <small class="text-body-secondary">@item.Category</small>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-body-secondary">@item.Company.City</small>
                        <small class="text-body-secondary">@item.Company.District</small>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-body-secondary">@item.Manifacturer</small>
                        <small class="text-body-secondary"></small>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? SearchTerm { get; set; }

    private ApplicationDbContext _db => Service;

    private IQueryable<Product> _query = default!;
    private List<Product> _items = new();

    private bool _loading;

    //paging
    private int _page = 1;
    private int _pageSize = 100;

    //search
    private List<string> _cities = new();
    private string? _selectedCity;
    private List<string> _districts = new();
    private string? _selectedDistrict;
    private List<string> _companies = new();
    private string? _selectedCompany;

    private List<string> _categories = new();
    private string? _selectedCategory;
    private List<string>? _manifacturers = new();
    private string? _selectedManifacturer;

    private string? _selectedSortBy;
    private string? _selectedOrder;

    private string? _searchTerm;

    protected override async Task OnInitializedAsync()
    {
        _query = _db.Products
        .Include(x => x.Company)
        .AsNoTracking()
        .AsQueryable();

        _cities = await _query.Select(x => x.Company.City).Distinct().ToListAsync();
        // _districts = await _query.Select(x => x.Company.District).Distinct().ToListAsync();

        _categories = await _query.Select(x => x.Category).Distinct().ToListAsync();
        _manifacturers = await _query.Select(x => x.Manifacturer!).Distinct().ToListAsync();

        await load();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(SearchTerm) == false)
        {
            _searchTerm = SearchTerm.Trim().ToLower();

            await load();
        }
    }

    private async Task load()
    {
        _loading = true;
        StateHasChanged();

        _query = _query
        .Where(x =>
        (
            string.IsNullOrEmpty(_searchTerm) ||
            x.Name.ToLower().Contains(_searchTerm) ||
            x.Price.ToString().Contains(_searchTerm) ||
            x.Category.ToLower().Contains(_searchTerm)
        ) &&
            (string.IsNullOrEmpty(_selectedCity) || x.Company.City == _selectedCity) &&
            (string.IsNullOrEmpty(_selectedDistrict) || x.Company.District == _selectedDistrict) &&
            (string.IsNullOrEmpty(_selectedCompany) || x.Company.Name == _selectedCompany) &&
            (string.IsNullOrEmpty(_selectedCategory) || x.Category == _selectedCategory) &&
            (string.IsNullOrEmpty(_selectedManifacturer) || x.Manifacturer == _selectedManifacturer)
        );

        if (_selectedSortBy == "name")
        {
            if (_selectedOrder == "desc")
            {
                _query = _query.OrderByDescending(x => x.Name);
            }
            else
            {
                _query = _query.OrderBy(x => x.Name);
            }
        }
        else if (_selectedSortBy == "price")
        {
            if (_selectedOrder == "desc")
            {
                _query = _query.OrderByDescending(x => x.Price);
            }
            else
            {
                _query = _query.OrderBy(x => x.Price);
            }
        }
        else if (_selectedSortBy == "category")
        {
            if (_selectedOrder == "desc")
            {
                _query = _query.OrderByDescending(x => x.Category);
            }
            else
            {
                _query = _query.OrderBy(x => x.Category);
            }
        }
        else if (_selectedSortBy == "manifacturer")
        {
            if (_selectedOrder == "desc")
            {
                _query = _query.OrderByDescending(x => x.Manifacturer);
            }
            else
            {
                _query = _query.OrderBy(x => x.Manifacturer);
            }
        }
        else
        {
            if (_selectedOrder == "desc")
            {
                _query = _query.OrderByDescending(x => x.Id);
            }
            else
            {
                _query = _query.OrderBy(x => x.Id);
            }
        }

        _query = _query.Skip((_page - 1) * _pageSize)
        .Take(_pageSize);
        _items = await _query.ToListAsync();

        _loading = false;
        StateHasChanged();
    }

    private async Task citySelected(string val)
    {
        _selectedCity = val;

        _districts.Clear();
        _companies.Clear();
        _selectedDistrict = default;
        _selectedCompany = default;

        var query = _db.Companies.Where(x => x.City == _selectedCity).AsQueryable();

        _districts = await query.Select(x => x.District).Distinct().ToListAsync();
        _companies = await query.Select(x => x.Name).Distinct().ToListAsync();

        await load();
    }
    private async Task districtSelected(string val)
    {
        _companies.Clear();

        _selectedDistrict = val;

        _companies = await _db.Companies.Where(x => x.District == _selectedDistrict).Select(x => x.Name).Distinct().ToListAsync();

        await load();
    }
    private async Task companySelected(string val)
    {
        _selectedCompany = val;

        await load();
    }

    private async Task categorySelected(string val)
    {
        _selectedCategory = val;

        await load();
    }

    private async Task manifacturerSelected(string val)
    {
        _selectedManifacturer = val;

        await load();
    }

    private async Task sortBySelected(string val)
    {
        _selectedSortBy = val;

        await load();
    }

    private async Task orderBySelected(string val)
    {
        _selectedOrder = val;

        await load();
    }

    private async Task search(ChangeEventArgs e)
    {
        _searchTerm = (string)e.Value!;
        await load();
    }

    private async Task reset()
    {
        _districts.Clear();
        _companies.Clear();
        _categories.Clear();

        _searchTerm = default;
        _selectedCity = default;
        _selectedDistrict = default;
        _selectedCompany = default;
        _selectedCategory = default;
        _selectedManifacturer = default;
        _page = 1;
        _selectedSortBy = default;
        _selectedOrder = default;

        await load();
    }
    }
