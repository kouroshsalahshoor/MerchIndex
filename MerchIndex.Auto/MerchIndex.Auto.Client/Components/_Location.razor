@* @page "/location" *@

@* https://github.com/IEvangelist/blazorators *@

@using Persilsoft.Nominatim.Geolocation.Blazor
@using Persilsoft.Nominatim.Geolocation.Blazor.Geocoding

@inject GeolocationService _geolocation
@inject IGeocoder _geocoderService

@* @rendermode InteractiveAuto *@
@rendermode InteractiveWebAssembly
@attribute [StreamRendering]

@if (string.IsNullOrEmpty(_address))
{
    <_Loading />
}
else
{
    @_address
}

@code {
    private string? _address = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await setAddress();
        }
    }
    private async Task setAddress()
    {
        try
        {
            throw new Exception("Location not found");
            var position = await _geolocation.GetPosition();
            if (!position.Equals(default))
            {
                var latitude = position.Latitude;
                var longitude = position.Longitude;

                var address = await _geocoderService.GetGeocodingAddressAsync(latitude, longitude);
                _address = address.DisplayAddress ?? "Okänd adress";

                StateHasChanged();

                Console.WriteLine($"CountryCode: {address.CountryCode}");
                Console.WriteLine($"PostalCode: {address.PostalCode}");
                Console.WriteLine($"District: {address.District}");
                Console.WriteLine($"Province: {address.Province}");
                Console.WriteLine($"Department: {address.Department}");

                var locs = address.DisplayAddress!.Split(",");
                Console.WriteLine($"Street: {locs[0]}");
                Console.WriteLine($"District: {locs[1]}");
                Console.WriteLine($"Province: {locs[2]}");
                Console.WriteLine($"County: {locs[3]}");
                Console.WriteLine($"Postal Code: {locs[4]}");
                Console.WriteLine($"Country: {locs[5]}");

                await _js.ToastrSuccess("Location found");
            }
        }
        catch (Exception e)
        {
            await _js.ToastrWarning(e.Message);
            // await _js.InvokeVoidAsync("alert", e.Message);

            _navigationManager.NavigateTo("/products");
        }
    }
}